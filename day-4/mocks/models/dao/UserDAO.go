// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/akbarsahata/alterra-agmc/day-4/models/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/akbarsahata/alterra-agmc/day-4/models"
)

// UserDAO is an autogenerated mock type for the UserDAO type
type UserDAO struct {
	mock.Mock
}

// CreateOne provides a mock function with given fields: data
func (_m *UserDAO) CreateOne(data dto.CreateUserBodyDTO) (*models.User, error) {
	ret := _m.Called(data)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(dto.CreateUserBodyDTO) *models.User); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(dto.CreateUserBodyDTO) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOne provides a mock function with given fields: userID
func (_m *UserDAO) DeleteOne(userID uint) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetMany provides a mock function with given fields:
func (_m *UserDAO) GetMany() ([]models.User, error) {
	ret := _m.Called()

	var r0 []models.User
	if rf, ok := ret.Get(0).(func() []models.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: params
func (_m *UserDAO) GetOne(params *models.User) (*models.User, error) {
	ret := _m.Called(params)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(*models.User) *models.User); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*models.User) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOneByID provides a mock function with given fields: userID
func (_m *UserDAO) GetOneByID(userID uint) (*models.User, error) {
	ret := _m.Called(userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uint) *models.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOne provides a mock function with given fields: userID, data
func (_m *UserDAO) UpdateOne(userID uint, data dto.UpdateUserBodyDTO) (*models.User, error) {
	ret := _m.Called(userID, data)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(uint, dto.UpdateUserBodyDTO) *models.User); ok {
		r0 = rf(userID, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint, dto.UpdateUserBodyDTO) error); ok {
		r1 = rf(userID, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserDAO interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserDAO creates a new instance of UserDAO. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserDAO(t mockConstructorTestingTNewUserDAO) *UserDAO {
	mock := &UserDAO{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
